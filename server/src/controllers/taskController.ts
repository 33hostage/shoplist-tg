import { Request, Response } from "express"
import { PrismaClient } from "@prisma/client"
import { sendTelegramNotification } from "../utils/notificationService"

const prisma = new PrismaClient()

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–ø–∏—Å–∫–æ–º (–≤–ª–∞–¥–µ–ª–µ—Ü + —É—á–∞—Å—Ç–Ω–∏–∫–∏),
 * –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.
 * @param listId ID —Å–ø–∏—Å–∫–∞.
 * @param currentUserId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ.
 * @returns –ú–∞—Å—Å–∏–≤ BigInt ID –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.
 */
async function getRecipients(
	listId: string,
	currentUserId: bigint
): Promise<bigint[]> {
	const list = await prisma.list.findUnique({
		where: { id: listId },
		select: {
			ownerId: true,
			participants: { select: { id: true } },
		},
	})

	if (!list) return []

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID (–≤–ª–∞–¥–µ–ª—å—Ü–∞ + —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
	const allUserIds = new Set([
		list.ownerId,
		...list.participants.map(p => p.id),
	])

	// –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
	const recipients = Array.from(allUserIds).filter(id => id !== currentUserId)

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt[] –≤ BigInt[]
	return recipients as bigint[]
}

// POST /api/tasks ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
export const createTask = async (req: Request, res: Response) => {
	try {
		const { listId, text } = req.body
		const userId = BigInt(req.user!.id)
		const senderName = req.user!.username || req.user!.first_name // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
		const list = await prisma.list.findUnique({
			where: { id: listId },
			select: {
				title: true,
				ownerId: true,
				participants: { select: { id: true } },
			},
		})

		if (!list) {
			return res.status(404).json({ error: "List not found" })
		}

		const task = await prisma.task.create({
			data: {
				text,
				list: { connect: { id: listId } },
			},
		})

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
		const recipients = await getRecipients(listId, userId)
		const notificationText = `‚ûï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ *${list.title}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${senderName}. –ó–∞–¥–∞—á–∞: ${text}`

		for (const recipientId of recipients) {
			await sendTelegramNotification(recipientId, notificationText)
		}

		res.status(201).json(task)
	} catch (error) {
		console.error("Error creating task:", error)
		res.status(500).json({ error: "Failed to create task" })
	}
}

// PATCH /api/tasks/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (completed)
export const updateTask = async (req: Request, res: Response) => {
	try {
		const { id } = req.params
		const { completed } = req.body
		const userId = BigInt(req.user!.id)
		const senderName = req.user!.username || req.user!.first_name

		const task = await prisma.task.findUnique({
			where: { id },
			select: { listId: true, text: true, list: { select: { title: true } } },
		})

		if (!task) {
			return res.status(404).json({ error: "Task not found" })
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü —Å–ø–∏—Å–∫–∞?
		// (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
		const updatedTask = await prisma.task.update({
			where: { id },
			data: { completed },
		})

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
		const listTitle = task.list.title
		const recipients = await getRecipients(task.listId, userId)

		const action = updatedTask.completed
			? "‚òëÔ∏è *–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é*"
			: "üîÑ *–°–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫*"

		const notificationText = `${action} –∑–∞–¥–∞—á—É "*${updatedTask.text}*" –≤ —Å–ø–∏—Å–∫–µ *${listTitle}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${senderName}.`

    for (const recipientId of recipients) {
      await sendTelegramNotification(recipientId, notificationText)
    }

		res.json(updatedTask)
	} catch (error) {
		console.error("Error updating task:", error)
		res.status(500).json({ error: "Failed to update task" })
	}
}

// DELETE /api/tasks/:id ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
export const deleteTask = async (req: Request, res: Response) => {
	try {
		const { id } = req.params

		const task = await prisma.task.findUnique({
			where: { id },
			include: { list: true },
		})

		if (!task) {
			return res.status(404).json({ error: "Task not found" })
		}

		await prisma.task.delete({
			where: { id },
		})

		res.status(204).send() // No Content
	} catch (error) {
		console.error("Error deleting task:", error)
		res.status(500).json({ error: "Failed to delete task" })
	}
}
